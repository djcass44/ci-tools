build:
  com.google.cloud.tools.jib-maven-plugin:
    dockercfg: true
    cd: true
    env:
      BUILD_IMAGE_PASSWORD: "{{ .Image.Password }}"
    command: mvn
    args:
      - compile
      - com.google.cloud.tools:jib-maven-plugin:3.3.2:build
      - -Djib.from.image={{ .Image.Parent }}
      - -Djib.to.image={{ .Image.Name }}
      - -Djib.to.auth.username={{ .Image.Username }}
      - -Djib.to.auth.password=$BUILD_IMAGE_PASSWORD
      - -Djib.to.tags={{ range $i, $e := .Tags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}
      - -Djib.container.format=OCI
      - -Djib.container.user=1001:0
      {{- if .Cache.Enabled }}
      - -Djib.baseImageCache={{ .Cache.Path }}
      - -Djib.applicationCache={{ .Cache.Path }}
      {{- end }}
      - -Dproject.build.outputTimestamp=2023-01-01T00:00:00Z
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
  com.github.Snakdy.container-build-engine:
    dockercfg: true
    command: container-build-engine
    args:
      - build
      - --image={{ .Image.Name }}
      - -t="{{ range $i, $e := .Tags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}"
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
  com.github.Snakdy.terrarium:
    dockercfg: true
    env:
      TERRARIUM_DEFAULT_BASE_IMAGE: "{{ .Image.Parent }}"
      TERRARIUM_DOCKER_REPO: "{{ .Image.Name }}"
      TERRARIUM_CACHE: "{{ .Cache.Path }}"
    command: terrarium
    args:
      - build
      - -t="{{ range $i, $e := .Tags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}"
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
      - {{ .Context }}
  com.github.djcass44.nib:
    dockercfg: true
    env:
      NIB_DEFAULT_BASE_IMAGE: "{{ .Image.Parent }}"
      NIB_DOCKER_REPO: "{{ .Image.Name }}"
      NIB_CACHE: {{ .Cache.Path }}
    command: nib
    args:
      - build
      - -t
      - {{ range $i, $e := .Tags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
      - {{ .Context }}
  com.github.djcass44.all-your-base:
    cd: true
    dockercfg: true
    command: ayb
    args:
      - build
      - --config=build.yaml
      - --cache-dir={{ .Cache.Path }}
      - --image={{ .Image.Name }}
      {{- range $i, $e := .Tags }}
      - --tag={{ $e }}
      {{- end }}
  com.github.google.ko:
    cd: true
    dockercfg: true
    env:
      KO_DEFAULTBASEIMAGE: "{{ .Image.Parent }}"
      KO_DOCKER_REPO: "{{ .Image.Name }}"
      {{- if .Cache.Enabled }}
      KOCACHE: {{ .Cache.Path }}
      {{- end }}
      GOFLAGS: -buildvcs=false
    command: ko
    args:
      - build
      - --sbom=none
      - --bare
      - -t
      - {{ range $i, $e := .Tags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
      - .{{ if .Go.ImportPath }}/{{ .Go.ImportPath }}{{ end }}
  com.github.moby.buildkit:
    dockercfg: true
    env:
      BUILDKITD_FLAGS: --oci-worker-no-process-sandbox
    command: buildctl-daemonless.sh
    args:
      - build
      - --frontend
      - dockerfile.v0
      - --local
      - context={{ .Context }}
      - --local
      - dockerfile={{ .Context }}/
      {{- if and (.Dockerfile.File) (ne .Dockerfile.File "Dockerfile") }}
      - --opt
      - filename={{ .Dockerfile.File }}
      {{- end }}
      {{- if .Cache.Enabled }}
      - --export-cache
      - type=registry,ref={{ .Image.Name}}:buildcache,mode=max,ignore-error=true
      - --import-cache
      - type=registry,ref={{ .Image.Name}}:buildcache
      {{- end }}
      - --output
      - type=image,"name={{ range $i, $e := .FQTags }}{{ if $i }},{{ end }}{{ $e }}{{ end }}",push=true
      {{- range $i, $e := .Dockerfile.Args }}
      - --opt
      - build-arg:{{ $e }}
      {{- end }}
      {{- range $i, $e := .ExtraArgs }}
      - "{{ $e }}"
      {{- end }}
dockerfiles:
  python/micropipenv@v1:
    content:
      inline: |
        ARG BASE_VERSION=3
        ARG BASE_REPO=registry.gitlab.com/av1o/base-images/python
        FROM $BASE_REPO:$BASE_VERSION

        RUN mkdir -p /home/somebody/app
        WORKDIR /home/somebody/app

        COPY requirements.txt .
        RUN pip install micropipenv && \
            micropipenv install

        COPY . .

        ARG APP="app.py"
        ENV APP ${APP}
        ENV PYTHONUNBUFFERED="true"
        ENTRYPOINT ["sh", "-c", "python $APP"]